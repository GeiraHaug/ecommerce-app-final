{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Noroff EP e-commerce API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3001",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Retrieve all users. Admin access is required.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Users retrieved successfully."
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Id": {
                            "type": "number",
                            "example": 2
                          },
                          "FirstName": {
                            "type": "string",
                            "example": "John"
                          },
                          "LastName": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "Username": {
                            "type": "string",
                            "example": "user123"
                          },
                          "Email": {
                            "type": "string",
                            "example": "johndoe@email.com"
                          },
                          "Address": {
                            "type": "string",
                            "example": "123 Street, City"
                          },
                          "Phone": {
                            "type": "string",
                            "example": "123456789"
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2024-12-21T14:29:40.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "example": "2024-12-21T14:29:40.000Z"
                          },
                          "MembershipId": {
                            "type": "number",
                            "example": 1
                          },
                          "RoleId": {
                            "type": "number",
                            "example": 2
                          },
                          "Membership": {
                            "type": "object",
                            "properties": {
                              "Id": {
                                "type": "number",
                                "example": 1
                              },
                              "Name": {
                                "type": "string",
                                "example": "Bronze"
                              },
                              "FromTotalPurchases": {
                                "type": "number",
                                "example": 0
                              },
                              "ToTotalPurchases": {
                                "type": "number",
                                "example": 15
                              },
                              "Discount": {
                                "type": "number",
                                "example": 0
                              }
                            }
                          },
                          "Cart": {},
                          "Orders": {
                            "type": "array",
                            "example": [],
                            "items": {}
                          },
                          "Role": {
                            "type": "object",
                            "properties": {
                              "Id": {
                                "type": "number",
                                "example": 2
                              },
                              "Name": {
                                "type": "string",
                                "example": "User"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve users."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Update user details by ID. Admin access is required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the user to be updated."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to update for the user.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "User updated successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid or missing fields.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Required fields are missing or invalid."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to update user."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/init/": {
      "post": {
        "tags": [
          "Initialize Database"
        ],
        "description": "Populate the database with initial roles, memberships, products, and an admin user.",
        "responses": {
          "200": {
            "description": "Database initialized successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Successfully initialized the Database."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to initialize the database.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Error initializing the database."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Register and Login"
        ],
        "description": "Register a new user.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string",
                  "example": "John"
                },
                "lastname": {
                  "type": "string",
                  "example": "Doe"
                },
                "username": {
                  "type": "string",
                  "example": "user123"
                },
                "email": {
                  "type": "string",
                  "example": "johndoe@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "password"
                },
                "address": {
                  "type": "string",
                  "example": "123 Street, City"
                },
                "phone": {
                  "type": "string",
                  "example": "123456789"
                }
              },
              "required": [
                "firstname",
                "lastname",
                "username",
                "email",
                "password",
                "address",
                "phone"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "You created an account."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Validation error message."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to register user.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed registering user."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Register and Login"
        ],
        "description": "Authenticate a user and return a JWT token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "Admin"
                },
                "password": {
                  "type": "string",
                  "example": "P@ssword2023"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Successfully logged in."
                    },
                    "token": {
                      "type": "string",
                      "example": "JWT Token"
                    },
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "email": {
                      "type": "string",
                      "example": "johndoe"
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Wrong username or password.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 401
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Wrong username or password."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to log in.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to log in."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/products/": {
      "get": {
        "tags": [
          "Products"
        ],
        "description": "Retrieve a list of all products, including their category and brand information.",
        "responses": {
          "200": {
            "description": "List of products retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Products found"
                    },
                    "products": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Product Name"
                          },
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "description": {
                            "type": "string",
                            "example": "Product description"
                          },
                          "price": {
                            "type": "number",
                            "example": 99.99
                          },
                          "date_added": {
                            "type": "string",
                            "example": "2024-01-01T11:11:11Z"
                          },
                          "imageUrl": {
                            "type": "string",
                            "example": "http://example.com/image.png"
                          },
                          "quantity": {
                            "type": "number",
                            "example": 10
                          },
                          "isDeleted": {
                            "type": "number",
                            "example": 0
                          },
                          "createdAt": {
                            "type": "string",
                            "example": "2024-01-01T11:11:11Z"
                          },
                          "BrandId": {
                            "type": "number",
                            "example": 1
                          },
                          "CategoryId": {
                            "type": "number",
                            "example": 1
                          },
                          "brand": {
                            "type": "string",
                            "example": "Example Brand"
                          },
                          "category": {
                            "type": "string",
                            "example": "Example Category"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to fetch products.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to fetch products."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "description": "Allows admin users to create a new product.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product details for creation.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "New Product"
                },
                "description": {
                  "type": "string",
                  "example": "Product description"
                },
                "price": {
                  "type": "number",
                  "example": 99.99
                },
                "quantity": {
                  "type": "number",
                  "example": 10
                },
                "imageUrl": {
                  "type": "string",
                  "example": "http://example.com/image.png"
                },
                "brandId": {
                  "type": "number",
                  "example": 1
                },
                "categoryId": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product created successfully."
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "New Product"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Validation error - Invalid product data.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Validation error message."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to create product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to create product."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "put": {
        "tags": [
          "Products"
        ],
        "description": "Allows admin users to update product details.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated product details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Product"
                },
                "description": {
                  "type": "string",
                  "example": "Updated description"
                },
                "price": {
                  "type": "number",
                  "example": 199.99
                },
                "quantity": {
                  "type": "number",
                  "example": 20
                },
                "imageUrl": {
                  "type": "string",
                  "example": "http://example.com/new-image.png"
                },
                "brandId": {
                  "type": "number",
                  "example": 2
                },
                "categoryId": {
                  "type": "number",
                  "example": 3
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product updated successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to update product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to update product."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "description": "Allows admin users to soft delete a product.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the product to delete."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product deleted successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to delete product.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to delete product."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/categories/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "description": "Retrieve all categories.",
        "responses": {
          "200": {
            "description": "Categories retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Categories retrieved successfully."
                    },
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "name": {
                            "type": "string",
                            "example": "TVs"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve categories.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve categories."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "description": "Create a new category.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Category name to be created.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "New Category"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category created successfully."
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "New Category"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Category name is required.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category name is required."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to create category.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to create category."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "put": {
        "tags": [
          "Categories"
        ],
        "description": "Update an existing category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the category to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated category name.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Category"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category updated successfully."
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "Updated Category"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid category ID or name.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Invalid category ID or name."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to update category.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to update category."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "description": "Delete a category by ID.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the category to delete."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category deleted successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid category ID.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Invalid category ID."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Category not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to delete category.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to delete category."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/cart/": {
      "get": {
        "tags": [
          "Cart"
        ],
        "description": "Retrieve the user's cart.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cart retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Cart retrieved successfully."
                    },
                    "cart": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "userId": {
                          "type": "number",
                          "example": 1
                        },
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "productId": {
                                "type": "number",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "Product A"
                              },
                              "quantity": {
                                "type": "number",
                                "example": 2
                              },
                              "price": {
                                "type": "number",
                                "example": 99.99
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to retrieve cart.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve cart."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "description": "Add a product to the user's cart.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product ID and quantity to add to the cart.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "number",
                  "example": 1
                },
                "quantity": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product added to cart successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Product added to cart successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Failed to add product to cart.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Error message describing the issue."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/cart/checkout/now": {
      "post": {
        "tags": [
          "Cart"
        ],
        "description": "Checkout the user's cart and place an order.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cart checked out successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Cart checked out successfully."
                    },
                    "order": {
                      "type": "object",
                      "properties": {
                        "orderId": {
                          "type": "number",
                          "example": 123
                        },
                        "totalAmount": {
                          "type": "number",
                          "example": 299.97
                        },
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "productId": {
                                "type": "number",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "Product A"
                              },
                              "quantity": {
                                "type": "number",
                                "example": 2
                              },
                              "price": {
                                "type": "number",
                                "example": 99.99
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Failed to checkout cart.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Error message describing the issue."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/brands/": {
      "get": {
        "tags": [
          "Brands"
        ],
        "description": "Retrieve all brands.",
        "responses": {
          "200": {
            "description": "Brands retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brands retrieved successfully."
                    },
                    "brands": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "name": {
                            "type": "string",
                            "example": "Example Brand"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve brands.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve brands."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "description": "Create a new brand.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Brand name to be created.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "New Brand"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Brand created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand created successfully."
                    },
                    "brand": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "New Brand"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Validation error - Brand name is missing or invalid.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand name is required."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to create brand.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to create brand."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/brands/{brandId}": {
      "put": {
        "tags": [
          "Brands"
        ],
        "description": "Update a specific brand.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the brand to be updated."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated brand name.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Brand Name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand updated successfully."
                    },
                    "brand": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "Updated Brand Name"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Validation error - Missing or invalid parameters.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Invalid brand ID."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Brand not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to update brand.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to update brand."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brands"
        ],
        "description": "Delete a specific brand.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the brand to be deleted."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Brand deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand deleted successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Validation error - Missing or invalid brand ID.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Invalid brand ID."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Brand not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Brand not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to delete brand.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to delete brand."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/search/": {
      "post": {
        "tags": [
          "Search"
        ],
        "description": "Search for products by name, brand or category. At least one search parameter is required.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Search parameters (searchField, categoryName, brandName) for filtering products.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "searchField": {
                  "type": "string",
                  "example": "Iphone"
                }
              },
              "required": [
                "searchField"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully completed search.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Successfully completed search."
                    },
                    "totalRecords": {
                      "type": "number",
                      "example": 2
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "name": {
                            "type": "string",
                            "example": "Another Product"
                          },
                          "description": {
                            "type": "string",
                            "example": "Another description"
                          },
                          "price": {
                            "type": "number",
                            "example": 39.99
                          },
                          "quantity": {
                            "type": "number",
                            "example": 7
                          },
                          "CategoryName": {
                            "type": "string",
                            "example": "Another Category"
                          },
                          "BrandName": {
                            "type": "string",
                            "example": "Another Brand"
                          },
                          "imageUrl": {
                            "type": "string",
                            "example": "http://example.com/another-image.png"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request. No search parameters provided.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "At least one search parameter is required."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Server error during search.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to search."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/orders/admin": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Retrieve all orders for all users. Admin access is required.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orders retrieved successfully."
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "userId": {
                            "type": "number",
                            "example": 1
                          },
                          "status": {
                            "type": "string",
                            "example": "Ordered"
                          },
                          "totalAmount": {
                            "type": "number",
                            "example": 100.5
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to retrieve orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve orders."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Retrieve all orders for the authenticated user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User orders retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Orders retrieved successfully."
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "status": {
                            "type": "string",
                            "example": "Ordered"
                          },
                          "totalAmount": {
                            "type": "number",
                            "example": 100.5
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to retrieve orders.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve orders."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Retrieve a specific order by ID for the authenticated user.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the order to retrieve."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Order retrieved successfully."
                    },
                    "order": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "status": {
                          "type": "string",
                          "example": "Ordered"
                        },
                        "totalAmount": {
                          "type": "number",
                          "example": 100.5
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Order not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to retrieve order.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve order."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "description": "Update the status of an order. Admin access is required.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the order to update."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "Completed"
                }
              }
            },
            "description": "The new status for the order."
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Order status updated successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid status provided.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Invalid or missing order status."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Order not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Order not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to update order status.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to update order status."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/roles/": {
      "get": {
        "tags": [
          "Roles"
        ],
        "description": "Retrieve a list of all roles. Only accessible to admin users.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Roles retrieved successfully."
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 2
                          },
                          "name": {
                            "type": "string",
                            "example": "User"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to retrieve roles.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to retrieve roles."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/memberships/": {
      "get": {
        "tags": [
          "Memberships"
        ],
        "description": "Retrieve all memberships from the database.",
        "responses": {
          "200": {
            "description": "Memberships retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Memberships retrieved successfully."
                    },
                    "memberships": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "name": {
                            "type": "string",
                            "example": "Bronze"
                          },
                          "fromTotalPurchases": {
                            "type": "number",
                            "example": 0
                          },
                          "toTotalPurchases": {
                            "type": "number",
                            "example": 15
                          },
                          "discount": {
                            "type": "number",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to fetch memberships.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to fetch memberships."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Memberships"
        ],
        "description": "Create a new membership. Admin only.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Membership details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "New Membership"
                },
                "fromTotalPurchases": {
                  "type": "number",
                  "example": 45
                },
                "toTotalPurchases": {
                  "type": "number",
                  "example": 60
                },
                "discount": {
                  "type": "number",
                  "example": 30
                }
              },
              "required": [
                "name",
                "fromTotalPurchases",
                "toTotalPurchases",
                "discount"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Membership created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 201
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership created successfully."
                    },
                    "membership": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "New Membership"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid input data.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 400
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Validation error message."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Failed to create membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to create membership."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/memberships/{membershipId}": {
      "put": {
        "tags": [
          "Memberships"
        ],
        "description": "Update a membership by ID. Admin only.",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the membership to update"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated membership details",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Silver"
                },
                "fromTotalPurchases": {
                  "type": "number",
                  "example": 15
                },
                "toTotalPurchases": {
                  "type": "number",
                  "example": 30
                },
                "discount": {
                  "type": "number",
                  "example": 15
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership updated successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Membership not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to update membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to update membership."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Memberships"
        ],
        "description": "Delete a membership by ID. Admin only.",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the membership to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Membership deleted successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "statuscode": {
                  "type": "number",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership deleted successfully."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Membership not found.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 404
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Membership not found."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Failed to delete membership.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error"
                },
                "statuscode": {
                  "type": "number",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "Failed to delete membership."
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Swagger Product"
        },
        "description": {
          "type": "string",
          "example": "Swagger Description"
        },
        "price": {
          "type": "number",
          "example": 10
        },
        "quantity": {
          "type": "number",
          "example": 1
        },
        "imageUrl": {
          "type": "string",
          "example": "http://swagger.com/product-image.png"
        },
        "brand": {
          "type": "string",
          "example": "Swagger Brand"
        },
        "category": {
          "type": "string",
          "example": "Swagger Category"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "quantity",
        "imageUrl",
        "brand",
        "category"
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "username": {
          "type": "string",
          "example": "johndoe"
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "phone": {
          "type": "string",
          "example": "1234567890"
        },
        "roleId": {
          "type": "number",
          "example": 2
        },
        "membershipId": {
          "type": "number",
          "example": 1
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "username",
        "email",
        "address",
        "phone",
        "roleId",
        "membershipId"
      ]
    }
  }
}